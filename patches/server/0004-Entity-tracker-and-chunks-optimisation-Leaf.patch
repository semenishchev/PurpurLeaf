From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Oleksandr Semenishchev <sashasemenishchev@gmail.com>
Date: Fri, 6 Dec 2024 22:30:13 +0100
Subject: [PATCH] Entity tracker and chunks optimisation (Leaf)


diff --git a/src/main/java/ca/spottedleaf/moonrise/common/misc/NearbyPlayers.java b/src/main/java/ca/spottedleaf/moonrise/common/misc/NearbyPlayers.java
index a152adf327b6debe4c87c7efbde2f83dd207e596..6cea51d5751f6fdac1dbe560e6497064dece49c0 100644
--- a/src/main/java/ca/spottedleaf/moonrise/common/misc/NearbyPlayers.java
+++ b/src/main/java/ca/spottedleaf/moonrise/common/misc/NearbyPlayers.java
@@ -7,6 +7,7 @@ import ca.spottedleaf.moonrise.common.util.ChunkSystem;
 import ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickConstants;
 import it.unimi.dsi.fastutil.longs.Long2ReferenceOpenHashMap;
 import it.unimi.dsi.fastutil.objects.Reference2ReferenceOpenHashMap;
+import me.mrfunny.purpurleaf.data.ChunkData;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
@@ -204,7 +205,9 @@ public final class NearbyPlayers {
             final long chunkKey = CoordinateUtils.getChunkKey(chunkX, chunkZ);
 
             NearbyPlayers.this.byChunk.computeIfAbsent(chunkKey, (final long keyInMap) -> {
-                return new TrackedChunk(keyInMap, NearbyPlayers.this); // Moonrise - Add direct lookup by chunk for NearbyPlayers
+                TrackedChunk trackedChunk = new TrackedChunk(keyInMap, NearbyPlayers.this); // Moonrise - Add direct lookup by chunk for NearbyPlayers
+                NearbyPlayers.this.world.moonrise$requestChunkData(chunkKey).setNearbyPlayers(trackedChunk); // PurpurLeaf start - set nearbyPlayers info
+                return trackedChunk;
             }).addPlayer(parameter, this.type);
         }
 
@@ -221,6 +224,12 @@ public final class NearbyPlayers {
 
             if (chunk.isEmpty()) {
                 NearbyPlayers.this.byChunk.remove(chunkKey);
+                // PurpurLeaf start - no nearby players
+                ChunkData chunkData = NearbyPlayers.this.world.moonrise$releaseChunkData(chunkKey);
+                if(chunkData != null) {
+                    chunkData.setNearbyPlayers(null);
+                }
+                // PurpurLeaf end
             }
         }
     }
diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/entity/ChunkSystemEntity.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/entity/ChunkSystemEntity.java
index 2c279854bdf214538380fa354e4298ec4bd9ac4e..365de8138399ca996ca9d90d1991ec89214a3bf2 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/entity/ChunkSystemEntity.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/entity/ChunkSystemEntity.java
@@ -36,4 +36,9 @@ public interface ChunkSystemEntity {
     public void moonrise$setUpdatingSectionStatus(final boolean to);
 
     public boolean moonrise$hasAnyPlayerPassengers();
+
+    // PurpurLeaf start - chunk data ref data
+    me.mrfunny.purpurleaf.data.ChunkData moonrise$getChunkData();
+    void moonrise$setChunkData(final @javax.annotation.Nullable me.mrfunny.purpurleaf.data.ChunkData chunkData);
+    // PurpurLeaf end
 }
diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/ChunkSystemLevel.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/ChunkSystemLevel.java
index efcd9057f008f0b9cf0d22b2b21d1851205841e5..408656a29fb021c595fcef91def8ab632657345a 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/ChunkSystemLevel.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/ChunkSystemLevel.java
@@ -19,4 +19,16 @@ public interface ChunkSystemLevel {
 
     public void moonrise$midTickTasks();
 
+    // PurpurLeaf start - define chunk data methods
+    boolean moonrise$areChunksLoaded(final int fromX, final int fromZ, final int toX, final int toZ);
+
+    me.mrfunny.purpurleaf.data.ChunkData moonrise$getChunkData(final long chunkKey);
+
+    me.mrfunny.purpurleaf.data.ChunkData moonrise$getChunkData(final int chunkX, final int chunkZ);
+
+    me.mrfunny.purpurleaf.data.ChunkData moonrise$requestChunkData(final long chunkKey);
+
+    @javax.annotation.Nullable
+    me.mrfunny.purpurleaf.data.ChunkData moonrise$releaseChunkData(final long chunkKey);
+    // PurpurLeaf end
 }
diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/ChunkEntitySlices.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/ChunkEntitySlices.java
index 5c7f2471a0b15ac2e714527296ad2aa7291999eb..8723b62081091ec4d9d5469a3df75137690fed6f 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/ChunkEntitySlices.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/ChunkEntitySlices.java
@@ -35,6 +35,7 @@ public final class ChunkEntitySlices {
     public final int chunkX;
     public final int chunkZ;
     public final Level world;
+    public final me.mrfunny.purpurleaf.data.ChunkData chunkData;
 
     private final EntityCollectionBySection allEntities;
     private final EntityCollectionBySection hardCollidingEntities;
@@ -55,7 +56,7 @@ public final class ChunkEntitySlices {
     }
 
     public ChunkEntitySlices(final Level world, final int chunkX, final int chunkZ, final FullChunkStatus status,
-                             final int minSection, final int maxSection) { // inclusive, inclusive
+                             me.mrfunny.purpurleaf.data.ChunkData chunkData, final int minSection, final int maxSection) { // PurpurLeaf - add holder data // inclusive, inclusive
         this.minSection = minSection;
         this.maxSection = maxSection;
         this.chunkX = chunkX;
@@ -68,6 +69,7 @@ public final class ChunkEntitySlices {
         this.entitiesByType = new Reference2ObjectOpenHashMap<>();
 
         this.status = status;
+        this.chunkData = chunkData;
     }
 
     public static List<Entity> readEntities(final ServerLevel world, final CompoundTag compoundTag) {
@@ -262,6 +264,7 @@ public final class ChunkEntitySlices {
             return false;
         }
         ((ChunkSystemEntity)entity).moonrise$setChunkStatus(this.status);
+        entity.moonrise$setChunkData(this.chunkData); // PurpurLeaf - set reference of current chunk data to entity
         final int sectionIndex = chunkSection - this.minSection;
 
         this.allEntities.addEntity(entity, sectionIndex);
@@ -295,6 +298,7 @@ public final class ChunkEntitySlices {
             return false;
         }
         ((ChunkSystemEntity)entity).moonrise$setChunkStatus(null);
+        entity.moonrise$setChunkData(null); // PurpurLeaf - reset chunk data
         final int sectionIndex = chunkSection - this.minSection;
 
         this.allEntities.removeEntity(entity, sectionIndex);
diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/client/ClientEntityLookup.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/client/ClientEntityLookup.java
index edcde00206d068bd79175fea33efa05b0e8c1562..78f38f895cec4fb0d1e0a5b366feeeed82675771 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/client/ClientEntityLookup.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/client/ClientEntityLookup.java
@@ -45,7 +45,9 @@ public final class ClientEntityLookup extends EntityLookup {
 
         final ChunkEntitySlices ret = new ChunkEntitySlices(
                 this.world, chunkX, chunkZ,
-                ticking ? FullChunkStatus.ENTITY_TICKING : FullChunkStatus.FULL, WorldUtil.getMinSection(this.world), WorldUtil.getMaxSection(this.world)
+                ticking ? FullChunkStatus.ENTITY_TICKING : FullChunkStatus.FULL,
+                null, // PurpurLeaf
+                WorldUtil.getMinSection(this.world), WorldUtil.getMaxSection(this.world)
         );
 
         // note: not handled by superclass
diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/dfl/DefaultEntityLookup.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/dfl/DefaultEntityLookup.java
index 465469e44346c50f30f3abd6b44f4173ccfcf248..a248c9be7a1207567224b453e1edf553a779e1e9 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/dfl/DefaultEntityLookup.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/dfl/DefaultEntityLookup.java
@@ -32,6 +32,7 @@ public final class DefaultEntityLookup extends EntityLookup {
     protected ChunkEntitySlices createEntityChunk(final int chunkX, final int chunkZ, final boolean transientChunk) {
         final ChunkEntitySlices ret = new ChunkEntitySlices(
                 this.world, chunkX, chunkZ, FullChunkStatus.FULL,
+                null, // PurpurLeaf
                 WorldUtil.getMinSection(this.world), WorldUtil.getMaxSection(this.world)
         );
 
diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/server/ServerEntityLookup.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/server/ServerEntityLookup.java
index dacf2b2988ce603879fe525a3418ac77f8a663f7..d1a4573bb5d507b9af97a69941b03d9b53aab419 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/server/ServerEntityLookup.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/server/ServerEntityLookup.java
@@ -17,7 +17,7 @@ public final class ServerEntityLookup extends EntityLookup {
 
     private final ServerLevel serverWorld;
     public final ReferenceList<Entity> trackerEntities = new ReferenceList<>(EMPTY_ENTITY_ARRAY); // Moonrise - entity tracker
-    public final ReferenceList<Entity> trackerUnloadedEntities = new ReferenceList<>(EMPTY_ENTITY_ARRAY); // Moonrise - entity tracker
+//    public final ReferenceList<Entity> trackerUnloadedEntities = new ReferenceList<>(EMPTY_ENTITY_ARRAY); PurpurLeaf - Don't process unloads // Moonrise - entity tracker
 
     public ServerEntityLookup(final ServerLevel world, final LevelCallback<Entity> worldCallback) {
         super(world, worldCallback);
@@ -77,14 +77,14 @@ public final class ServerEntityLookup extends EntityLookup {
         if (entity instanceof ServerPlayer player) {
             ((ChunkSystemServerLevel)this.serverWorld).moonrise$getNearbyPlayers().removePlayer(player);
         }
-        this.trackerUnloadedEntities.remove(entity); // Moonrise - entity tracker
+//        this.trackerUnloadedEntities.remove(entity); PurpurLeaf - Don't process unloads // Moonrise - entity tracker
     }
 
     @Override
     protected void entityStartLoaded(final Entity entity) {
         // Moonrise start - entity tracker
         this.trackerEntities.add(entity);
-        this.trackerUnloadedEntities.remove(entity);
+//        this.trackerUnloadedEntities.remove(entity); PurpurLeaf - Don't process unloads
         // Moonrise end - entity tracker
     }
 
@@ -92,7 +92,7 @@ public final class ServerEntityLookup extends EntityLookup {
     protected void entityEndLoaded(final Entity entity) {
         // Moonrise start - entity tracker
         this.trackerEntities.remove(entity);
-        this.trackerUnloadedEntities.add(entity);
+        // this.trackerUnloadedEntities.add(entity); PurpurLeaf - Don't process unloads
         // Moonrise end - entity tracker
     }
 
diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/NewChunkHolder.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/NewChunkHolder.java
index 45eda96fd8a1acb87dbb69ce5495fec7e451416f..9140c07769f97d458a28a0d9bcb3566501017a56 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/NewChunkHolder.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/NewChunkHolder.java
@@ -31,6 +31,7 @@ import it.unimi.dsi.fastutil.objects.Reference2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectMap;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ReferenceLinkedOpenHashSet;
+import me.mrfunny.purpurleaf.data.ChunkData;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.server.level.ChunkHolder;
 import net.minecraft.server.level.ChunkLevel;
@@ -89,6 +90,7 @@ public final class NewChunkHolder {
             if (this.entityChunk == null) {
                 ret = this.entityChunk = new ChunkEntitySlices(
                     this.world, this.chunkX, this.chunkZ, this.getChunkStatus(),
+                    this.holderData, // PurpurLeaf
                     WorldUtil.getMinSection(this.world), WorldUtil.getMaxSection(this.world)
                 );
 
@@ -640,6 +642,7 @@ public final class NewChunkHolder {
     }
 
     public final ChunkHolder vanillaChunkHolder;
+    public final me.mrfunny.purpurleaf.data.ChunkData holderData;  // PurpurLeaf - add holder
 
     public NewChunkHolder(final ServerLevel world, final int chunkX, final int chunkZ, final ChunkTaskScheduler scheduler) {
         this.world = world;
@@ -651,6 +654,7 @@ public final class NewChunkHolder {
                 world.getLightEngine(), null, world.getChunkSource().chunkMap
         );
         ((ChunkSystemChunkHolder)this.vanillaChunkHolder).moonrise$setRealChunkHolder(this);
+        this.holderData = world.moonrise$requestChunkData(CoordinateUtils.getChunkKey(chunkX, chunkZ)); // PurpurLeaf
     }
 
     public ChunkAccess getCurrentChunk() {
@@ -752,6 +756,7 @@ public final class NewChunkHolder {
 
     void markUnloaded() {
         this.unloaded = true;
+        this.world.moonrise$releaseChunkData(CoordinateUtils.getChunkKey(this.chunkX, this.chunkZ)); // PurpurLeaf
     }
 
     private boolean inUnloadQueue = false;
diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/entity_tracker/EntityTrackerTrackedEntity.java b/src/main/java/ca/spottedleaf/moonrise/patches/entity_tracker/EntityTrackerTrackedEntity.java
index 1fa07bef57d82c6d5242aaaf66011f0913515231..d31d78de4ccef2443045ba282fa0a227571c27db 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/entity_tracker/EntityTrackerTrackedEntity.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/entity_tracker/EntityTrackerTrackedEntity.java
@@ -10,4 +10,5 @@ public interface EntityTrackerTrackedEntity {
 
     public void moonrise$clearPlayers();
 
+    boolean moonrise$hasPlayers(); // PurpurLeaf
 }
diff --git a/src/main/java/me/mrfunny/purpurleaf/PurpurLeafAPI.java b/src/main/java/me/mrfunny/purpurleaf/PurpurLeafAPI.java
new file mode 100644
index 0000000000000000000000000000000000000000..a780d3a43ac67156acc365649c99d851b22178c1
--- /dev/null
+++ b/src/main/java/me/mrfunny/purpurleaf/PurpurLeafAPI.java
@@ -0,0 +1,42 @@
+package me.mrfunny.purpurleaf;
+
+import ca.spottedleaf.moonrise.common.util.TickThread;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import me.mrfunny.purpurleaf.config.PurpurleafConfig;
+import me.mrfunny.purpurleaf.util.TickThreadFactory;
+import me.mrfunny.purpurleaf.util.VirtualTickThreadFactory;
+
+import java.util.concurrent.*;
+
+public class PurpurLeafAPI {
+    private static ExecutorService executor;
+    private static ScheduledExecutorService scheduledExecutor;
+    public static void init() {
+        executor = PurpurleafConfig.virtualThreads
+            ? Executors.newThreadPerTaskExecutor(new VirtualTickThreadFactory())
+            : new ThreadPoolExecutor(
+                4, // considering all processors have hyperthreading, so 4 threads will take exactly 1 full core
+                Runtime.getRuntime().availableProcessors() * 2, // we don't really want to have more than 2 threads per logical core
+                5L,
+                TimeUnit.SECONDS,
+                new LinkedBlockingQueue<>(),
+                new ThreadFactoryBuilder()
+                    .setDaemon(true)
+                    .setThreadFactory(new TickThreadFactory())
+                    .build()
+            );
+        scheduledExecutor = Executors.newSingleThreadScheduledExecutor();
+    }
+
+    public static ExecutorService getExecutor() {
+        return executor;
+    }
+
+    public static ScheduledExecutorService getScheduledExecutor() {
+        return scheduledExecutor;
+    }
+
+    public static void scheduleOnMainExecutor(Runnable runnable, long delay, TimeUnit timeUnit) {
+        scheduledExecutor.schedule(() -> executor.execute(runnable), delay, timeUnit);
+    }
+}
diff --git a/src/main/java/me/mrfunny/purpurleaf/data/ChunkData.java b/src/main/java/me/mrfunny/purpurleaf/data/ChunkData.java
new file mode 100644
index 0000000000000000000000000000000000000000..b1c529a0131c9b62db7a936ff34543c1cab6922a
--- /dev/null
+++ b/src/main/java/me/mrfunny/purpurleaf/data/ChunkData.java
@@ -0,0 +1,26 @@
+package me.mrfunny.purpurleaf.data;
+
+import ca.spottedleaf.moonrise.common.misc.NearbyPlayers;
+
+import java.util.concurrent.atomic.AtomicInteger;
+
+public class ChunkData {
+    private final AtomicInteger refCount = new AtomicInteger(0);
+    private NearbyPlayers.TrackedChunk nearbyPlayers;
+
+    public int increaseRef() {
+        return refCount.incrementAndGet();
+    }
+
+    public int decreaseRef() {
+        return refCount.decrementAndGet();
+    }
+
+    public NearbyPlayers.TrackedChunk getNearbyPlayers() {
+        return nearbyPlayers;
+    }
+
+    public void setNearbyPlayers(final NearbyPlayers.TrackedChunk nearbyPlayers) {
+        this.nearbyPlayers = nearbyPlayers;
+    }
+}
diff --git a/src/main/java/me/mrfunny/purpurleaf/util/HashedReferenceList.java b/src/main/java/me/mrfunny/purpurleaf/util/HashedReferenceList.java
new file mode 100644
index 0000000000000000000000000000000000000000..d56dc1e8cdcc282a2fc6e5eafa1acbb8f289f74f
--- /dev/null
+++ b/src/main/java/me/mrfunny/purpurleaf/util/HashedReferenceList.java
@@ -0,0 +1,279 @@
+package me.mrfunny.purpurleaf.util;
+
+import it.unimi.dsi.fastutil.objects.Reference2IntOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ReferenceArrayList;
+import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.*;
+
+/**
+ * Wraps a {@link List} with a hash table which provides O(1) lookups for {@link Collection#contains(Object)}. The type
+ * contained by this list must use reference-equality semantics.
+ * <p>
+ * Taken from org.leaf.util
+ */
+@SuppressWarnings("SuspiciousMethodCalls")
+public class HashedReferenceList<T> implements List<T> {
+    private final ReferenceArrayList<T> list;
+    private final Reference2IntOpenHashMap<T> counter;
+
+    public HashedReferenceList(List<T> list) {
+        this.list = new ReferenceArrayList<>();
+        this.list.addAll(list);
+
+        this.counter = new Reference2IntOpenHashMap<>();
+        this.counter.defaultReturnValue(0);
+
+        for (T obj : this.list) {
+            this.counter.addTo(obj, 1);
+        }
+    }
+
+    @Override
+    public int size() {
+        return this.list.size();
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return this.list.isEmpty();
+    }
+
+    @Override
+    public boolean contains(Object o) {
+        return this.counter.containsKey(o);
+    }
+
+    @Override
+    public Iterator<T> iterator() {
+        return this.listIterator();
+    }
+
+    @Override
+    public Object[] toArray() {
+        return this.list.toArray();
+    }
+
+    @SuppressWarnings("SuspiciousToArrayCall")
+    @Override
+    public <T1> T1[] toArray(T1 @NotNull [] a) {
+        return this.list.toArray(a);
+    }
+
+    @Override
+    public boolean add(T t) {
+        this.trackReferenceAdded(t);
+
+        return this.list.add(t);
+    }
+
+    @Override
+    public boolean remove(Object o) {
+        this.trackReferenceRemoved(o);
+
+        return this.list.remove(o);
+    }
+
+    @Override
+    public boolean containsAll(Collection<?> c) {
+        for (Object obj : c) {
+            if (!this.counter.containsKey(obj)) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    @Override
+    public boolean addAll(Collection<? extends T> c) {
+        for (T obj : c) {
+            this.trackReferenceAdded(obj);
+        }
+
+        return this.list.addAll(c);
+    }
+
+    @Override
+    public boolean addAll(int index, Collection<? extends T> c) {
+        for (T obj : c) {
+            this.trackReferenceAdded(obj);
+        }
+
+        return this.list.addAll(index, c);
+    }
+
+    @Override
+    public boolean removeAll(@NotNull Collection<?> c) {
+        if (this.size() >= 2 && c.size() > 4 && c instanceof List) {
+            //HashReferenceList uses reference equality, so using ReferenceOpenHashSet is fine
+            c = new ReferenceOpenHashSet<>(c);
+        }
+        this.counter.keySet().removeAll(c);
+        return this.list.removeAll(c);
+    }
+
+    @Override
+    public boolean retainAll(@NotNull Collection<?> c) {
+        this.counter.keySet().retainAll(c);
+        return this.list.retainAll(c);
+    }
+
+    @Override
+    public void clear() {
+        this.counter.clear();
+        this.list.clear();
+    }
+
+    @Override
+    public T get(int index) {
+        return this.list.get(index);
+    }
+
+    @Override
+    public T set(int index, T element) {
+        T prev = this.list.set(index, element);
+
+        if (prev != element) {
+            if (prev != null) {
+                this.trackReferenceRemoved(prev);
+            }
+
+            this.trackReferenceAdded(element);
+        }
+
+        return prev;
+    }
+
+    @Override
+    public void add(int index, T element) {
+        this.trackReferenceAdded(element);
+
+        this.list.add(index, element);
+    }
+
+    @Override
+    public T remove(int index) {
+        T prev = this.list.remove(index);
+
+        if (prev != null) {
+            this.trackReferenceRemoved(prev);
+        }
+
+        return prev;
+    }
+
+    @Override
+    public int indexOf(Object o) {
+        return this.list.indexOf(o);
+    }
+
+    @Override
+    public int lastIndexOf(Object o) {
+        return this.list.lastIndexOf(o);
+    }
+
+    @Override
+    public ListIterator<T> listIterator() {
+        return this.listIterator(0);
+    }
+
+    @Override
+    public ListIterator<T> listIterator(int index) {
+        return new ListIterator<>() {
+            private final ListIterator<T> inner = HashedReferenceList.this.list.listIterator(index);
+
+            @Override
+            public boolean hasNext() {
+                return this.inner.hasNext();
+            }
+
+            @Override
+            public T next() {
+                return this.inner.next();
+            }
+
+            @Override
+            public boolean hasPrevious() {
+                return this.inner.hasPrevious();
+            }
+
+            @Override
+            public T previous() {
+                return this.inner.previous();
+            }
+
+            @Override
+            public int nextIndex() {
+                return this.inner.nextIndex();
+            }
+
+            @Override
+            public int previousIndex() {
+                return this.inner.previousIndex();
+            }
+
+            @Override
+            public void remove() {
+                int last = this.previousIndex();
+
+                if (last == -1) {
+                    throw new NoSuchElementException();
+                }
+
+                T prev = HashedReferenceList.this.get(last);
+
+                if (prev != null) {
+                    HashedReferenceList.this.trackReferenceRemoved(prev);
+                }
+
+                this.inner.remove();
+            }
+
+            @Override
+            public void set(T t) {
+                int last = this.previousIndex();
+
+                if (last == -1) {
+                    throw new NoSuchElementException();
+                }
+
+                T prev = HashedReferenceList.this.get(last);
+
+                if (prev != t) {
+                    if (prev != null) {
+                        HashedReferenceList.this.trackReferenceRemoved(prev);
+                    }
+
+                    HashedReferenceList.this.trackReferenceAdded(t);
+                }
+
+                this.inner.remove();
+            }
+
+            @Override
+            public void add(T t) {
+                HashedReferenceList.this.trackReferenceAdded(t);
+
+                this.inner.add(t);
+            }
+        };
+    }
+
+    @Override
+    public List<T> subList(int fromIndex, int toIndex) {
+        return this.list.subList(fromIndex, toIndex);
+    }
+
+    private void trackReferenceAdded(T t) {
+        this.counter.addTo(t, 1);
+    }
+
+    @SuppressWarnings("unchecked")
+    private void trackReferenceRemoved(Object o) {
+        if (this.counter.addTo((T) o, -1) <= 1) {
+            this.counter.removeInt(o);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 1883abec14e05f8eb2e865446b4d81091b1aa5e0..6e60d88c8917c8a02029e7fd6bc45282fe7fe3e9 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -931,10 +931,14 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             if (tracker == null) {
                 continue;
             }
-            ((ca.spottedleaf.moonrise.patches.entity_tracker.EntityTrackerTrackedEntity)tracker).moonrise$tick(nearbyPlayers.getChunk(entity.chunkPosition()));
-            tracker.serverEntity.sendChanges();
+            // PurpurLeaf start - optimisation
+            tracker.moonrise$tick(entity.moonrise$getChunkData().getNearbyPlayers()); // directly know the reference without hashmap lookup
+            if(tracker.moonrise$hasPlayers() || entity.moonrise$getChunkStatus().isOrAfter(FullChunkStatus.ENTITY_TICKING)) {
+                tracker.serverEntity.sendChanges(); // send changes if there are changes to send
+            }
+            // PurpurLeaf end
         }
-
+        /* PurpurLeaf start - don't process unloads
         // process unloads
         final ca.spottedleaf.moonrise.common.list.ReferenceList<net.minecraft.world.entity.Entity> unloadedEntities = entityLookup.trackerUnloadedEntities;
         final Entity[] unloadedEntitiesRaw = java.util.Arrays.copyOf(unloadedEntities.getRawDataUnchecked(), unloadedEntities.size());
@@ -947,6 +951,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             }
             ((ca.spottedleaf.moonrise.patches.entity_tracker.EntityTrackerTrackedEntity)tracker).moonrise$clearPlayers();
         }
+        PurpurLeaf end */
     }
     // Paper end - optimise entity tracker
 
@@ -1148,6 +1153,13 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             }
         }
 
+        // PurpurLeaf start
+        @Override
+        public final boolean moonrise$hasPlayers() {
+            return !this.seenBy.isEmpty();
+        }
+        // PurpurLeaf end
+
         @Override
         public final void moonrise$removeNonTickThreadPlayers() {
             boolean foundToRemove = false;
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 7aadcaa1785c6560eb1ce2f1179225facca47d84..5c00b440c7e7c759f806e0304166bceb5922cb5d 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -547,6 +547,20 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         this.trackedEntity = trackedEntity;
     }
 
+    // PurpurLeaf start - chunk data getters and setters
+    @javax.annotation.Nullable
+    private me.mrfunny.purpurleaf.data.ChunkData chunkData;
+    @Override
+    public final me.mrfunny.purpurleaf.data.ChunkData moonrise$getChunkData() {
+        return this.chunkData;
+    }
+
+    @Override
+    public final void moonrise$setChunkData(@javax.annotation.Nullable me.mrfunny.purpurleaf.data.ChunkData chunkData) {
+        this.chunkData = chunkData;
+    }
+    // PurpurLeaf end
+
     private static void collectIndirectPassengers(final List<Entity> into, final List<Entity> from) {
         for (final Entity passenger : from) {
             into.add(passenger);
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 5057d9d433ba002a22d22adfaf7323b2cfaee9af..e0111d814dd4a5d3ee53de0f3daac1726b938002 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -10,9 +10,10 @@ import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+
+import me.mrfunny.purpurleaf.util.HashedReferenceList;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
-import net.minecraft.ReportedException;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
@@ -25,14 +26,12 @@ import net.minecraft.core.registries.Registries;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
-import io.papermc.paper.util.MCUtil;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.FullChunkStatus;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
-import net.minecraft.util.AbortableIterationConsumer;
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.StringRepresentable;
@@ -42,8 +41,6 @@ import net.minecraft.world.TickRateManager;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.damagesource.DamageSources;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.boss.EnderDragonPart;
-import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
@@ -116,9 +113,9 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
     public static final int TICKS_PER_DAY = 24000;
     public static final int MAX_ENTITY_SPAWN_Y = 20000000;
     public static final int MIN_ENTITY_SPAWN_Y = -20000000;
-    public final List<TickingBlockEntity> blockEntityTickers = Lists.newArrayList(); // Paper - public
+    public final List<TickingBlockEntity> blockEntityTickers = new HashedReferenceList<>(Lists.newArrayList()); // Leaf - Lithium - hashed list // Paper - public
     protected final NeighborUpdater neighborUpdater;
-    private final List<TickingBlockEntity> pendingBlockEntityTickers = Lists.newArrayList();
+    private final List<TickingBlockEntity> pendingBlockEntityTickers = new HashedReferenceList<>(Lists.newArrayList()); // Leaf - Lithium - hashed list
     private boolean tickingBlockEntities;
     public final Thread thread;
     private final boolean isDebug;
@@ -233,6 +230,50 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
         return (CraftServer) Bukkit.getServer();
     }
 
+    // PurpurLeaf start - nearby players chunk data
+    private final ca.spottedleaf.concurrentutil.map.ConcurrentLong2ReferenceChainedHashTable<me.mrfunny.purpurleaf.data.ChunkData> chunkData = new ca.spottedleaf.concurrentutil.map.ConcurrentLong2ReferenceChainedHashTable<>();
+    @Override
+    public boolean moonrise$areChunksLoaded(final int fromX, final int fromZ, final int toX, final int toZ) {
+        ChunkSource chunkSource = this.getChunkSource();
+
+        for (int currZ = fromZ; currZ <= toZ; currZ++) {
+            for (int currX = fromX; currX <= toX; currX++) {
+                if (!chunkSource.hasChunk(currX, currZ)) {
+                    return false;
+                }
+            }
+        }
+
+        return true;
+    }
+
+    @Override
+    public final me.mrfunny.purpurleaf.data.ChunkData moonrise$getChunkData(final long chunkKey) {
+        return this.chunkData.get(chunkKey);
+    }
+
+    @Override
+    public final me.mrfunny.purpurleaf.data.ChunkData moonrise$getChunkData(final int chunkX, final int chunkZ) {
+        return this.chunkData.get(ChunkPos.asLong(chunkX, chunkZ));
+    }
+
+    @Override
+    public final me.mrfunny.purpurleaf.data.ChunkData moonrise$requestChunkData(final long chunkKey) {
+        return this.chunkData.compute(chunkKey, (keyInMap, val) -> {
+            if (val == null) {
+                val = new me.mrfunny.purpurleaf.data.ChunkData();
+            }
+            val.increaseRef();
+            return val;
+        });
+    }
+    @Nullable
+    @Override
+    public final me.mrfunny.purpurleaf.data.ChunkData moonrise$releaseChunkData(long chunkKey) {
+        return this.chunkData.compute(chunkKey, (keyInMap, chunkData) -> chunkData.decreaseRef() == 0 ? null : chunkData);
+    }
+    // PurpurLeaf end
+
     // Paper start - Use getChunkIfLoadedImmediately
     @Override
     public boolean hasChunk(int chunkX, int chunkZ) {
diff --git a/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java b/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java
index 8fc65c32a3c6e6842a76b36f45e1b1c23abbc480..6c8fe3576d3ecb915c105b5388ba9aaf44146f46 100644
--- a/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java
@@ -29,7 +29,7 @@ public class PoweredRailBlock extends BaseRailBlock {
         this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH)).setValue(PoweredRailBlock.POWERED, false)).setValue(PoweredRailBlock.WATERLOGGED, false));
     }
 
-    protected boolean findPoweredRailSignal(Level world, BlockPos pos, BlockState state, boolean flag, int distance) {
+    public boolean findPoweredRailSignal(Level world, BlockPos pos, BlockState state, boolean flag, int distance) { // Leaf - public
         if (distance >= world.purpurConfig.railActivationRange) { // Purpur
             return false;
         } else {
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
index cab7ca4218e5903b6a5e518af55457b9a1b5111c..953863686dcfa64f4d285794248880de05dbc1b6 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
@@ -179,7 +179,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
             return;
         }
 
-        Preconditions.checkArgument(data instanceof OldCraftChunkData, "Plugins must use createChunkData(World) rather than implementing ChunkData: %s", data);
+        Preconditions.checkArgument(data instanceof OldCraftChunkData, "Plugins must use createChunkData(World) rather than implementing me.mrfunny.purpurleaf.data.ChunkData: %s", data);
         OldCraftChunkData craftData = (OldCraftChunkData) data;
         LevelChunkSection[] sections = craftData.getRawChunkData();
 
